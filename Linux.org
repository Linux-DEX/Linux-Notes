#+TITLE: LINUX NOTE
#+DESCRIPTION: LINUX TUTORIAL
#+AUTHOR: Linux-DEX
#+OPTIONS: toc:4

* TABLE OF CONTENT :toc:
- [[#linux-file-system][LINUX FILE SYSTEM]]
  - [[#directory-structure][Directory Structure]]
  - [[#linux-file-system-features][Linux File System features]]
- [[#types-of-linux-file-system][TYPES OF LINUX FILE SYSTEM]]
  - [[#ext-ext2-ext3--ext4-file-system][Ext, Ext2, Ext3 & Ext4 file system]]
  - [[#jfs-file-system][JFS file system]]
  - [[#reiserfs-file-system][ReiserFS file system]]
  - [[#xfs-file-system][XFS file system]]
  - [[#btrfs-file-system][BTRFS file system]]
  - [[#swap-file-system][swap file system]]
- [[#display-server-protocols][Display server protocols]]
  - [[#x11][X11]]
  - [[#wayland][Wayland]]
- [[#kernel][Kernel]]
  - [[#types-of-kernel][Types of Kernel]]
- [[#bootloader][Bootloader]]
  - [[#tpyes-of-bootloader][Tpyes of Bootloader]]
- [[#linux-commands][LINUX COMMANDS]]
  - [[#sudo][sudo]]
  - [[#whoami][whoami]]
  - [[#man][man]]
  - [[#clear][clear]]
  - [[#pwd][pwd]]
  - [[#ls][ls]]
  - [[#cd][cd]]
  - [[#mkdir][mkdir]]
  - [[#touch][touch]]
  - [[#rmdir][rmdir]]
  - [[#rm][rm]]
  - [[#open][open]]
  - [[#mv][mv]]
  - [[#cp][cp]]
  - [[#head][head]]
  - [[#tail][tail]]
  - [[#date][date]]
  - [[#redirecting-standard-output][redirecting standard output]]
  - [[#cat][cat]]
  - [[#less][less]]
  - [[#more][more]]
  - [[#echo][echo]]
  - [[#wc][wc]]
  - [[#piping---][piping ( | )]]
  - [[#sort][sort]]
  - [[#uniq][uniq]]
  - [[#expansion][expansion]]
  - [[#diff][diff]]
  - [[#find][find]]
  - [[#grep][grep]]
  - [[#du][du]]
  - [[#df][df]]
  - [[#history][history]]
  - [[#ps][ps]]
  - [[#top][top]]
  - [[#htop][htop]]
  - [[#kill][kill]]
  - [[#killall][killall]]
  - [[#job-bg--fg][job, bg & fg]]
  - [[#sleep][sleep]]
  - [[#gzip][gzip]]
  - [[#gunzip][gunzip]]
  - [[#zip--unzip][zip & unzip]]
  - [[#tar][tar]]
  - [[#alias][alias]]
  - [[#xargs][xargs]]
  - [[#ln][ln]]
  - [[#who][who]]
  - [[#su][su]]
  - [[#passwd][passwd]]
  - [[#chown][chown]]
  - [[#chmod][chmod]]
  - [[#wget][wget]]
  - [[#curl][curl]]
  - [[#lf][lf]]
  - [[#gdu][gdu]]
  - [[#neofetch][neofetch]]
  - [[#lshw][lshw]]
  - [[#lscpu][lscpu]]
  - [[#lsblk][lsblk]]
  - [[#lsusb][lsusb]]
  - [[#ifconfig][ifconfig]]
  - [[#free][free]]
  - [[#lspci][lspci]]
  - [[#lsscsi][lsscsi]]
  - [[#hdparm][hdparm]]
  - [[#fdisk][fdisk]]
  - [[#dmidecode][dmidecode]]
  - [[#ip][ip]]
  - [[#hostname][hostname]]
  - [[#locate][locate]]
  - [[#bpytop][bpytop]]
  - [[#fzf][fzf]]
  - [[#ripgrep][ripgrep]]
  - [[#z-oxide][z oxide]]
  - [[#bat][bat]]
  - [[#exa][exa]]
  - [[#speedtest][speedtest]]
  - [[#route][route]]
  - [[#uname][uname]]
  - [[#nice][nice]]
  - [[#renice][renice]]
  - [[#tree][tree]]
  - [[#arp][arp]]
  - [[#cut][cut]]
  - [[#time][time]]
  - [[#xdg-open][xdg-open]]
  - [[#sensors][sensors]]
  - [[#iwconfig][iwconfig]]
  - [[#wavemon][wavemon]]
  - [[#getfacl][getfacl]]
  - [[#shred][shred]]
  - [[#file][file]]
  - [[#netstat][netstat]]
  - [[#sed][sed]]
  - [[#ping][ping]]
- [[#ranger-file-manager][RANGER (File Manager)]]
- [[#changing-default-shell][Changing default shell]]
  - [[#list-the-shell-in-system][list the shell in system]]
  - [[#select-the-path-from-the-option-given][select the path from the option given]]
- [[#network-manager-to-connect-to-wifi][NETWORK MANAGER (to connect to wifi)]]
  - [[#connect-to-wifi][Connect to wifi]]
  - [[#delete-the-network][Delete the network]]
  - [[#disconnect][Disconnect]]
  - [[#check-wifi-connection][Check wifi connection]]
  - [[#check-available-wifi][Check available wifi]]
  - [[#turn-on-wifi][Turn on wifi]]
  - [[#turn-off-wifi][Turn off wifi]]
  - [[#show-password][Show password]]
- [[#bluetooth-manager][BLUETOOTH MANAGER]]
  - [[#check-bluetooth-status][Check bluetooth status]]
  - [[#enable-service][Enable service]]
  - [[#start-bluetooth][Start bluetooth]]
  - [[#scan][Scan]]
  - [[#discoverable-to-other-devices][Discoverable to other devices]]
  - [[#pair-device][Pair device]]
  - [[#connect-device][Connect device]]
  - [[#list-pair-device][List pair device]]
  - [[#list-devices-within-bluetooth-range][List devices within bluetooth range]]
  - [[#option][option]]
- [[#vim--neovim][VIM / NEOVIM]]
  - [[#global][Global]]
  - [[#cursor-movement][Cursor Movement]]
  - [[#insert-mode---insertingappending-text][INSERT MODE - inserting/appending text]]
  - [[#editing][EDITING]]
  - [[#marking-text-visual-mode][MARKING TEXT (Visual mode)]]
  - [[#visual-commands][VISUAL COMMANDS]]
  - [[#registers][REGISTERS]]
  - [[#marks--positions][MARKS & POSITIONS]]
  - [[#macros][MACROS]]
  - [[#cut--paste][CUT & PASTE]]
  - [[#indent-text][INDENT TEXT]]
  - [[#search--replace][SEARCH & REPLACE]]
  - [[#search-in-multiple-files][SEARCH IN MULTIPLE FILES]]
  - [[#tabs][TABS]]
  - [[#working-with-multiple-files][WORKING WITH MULTIPLE FILES]]
  - [[#diff-1][Diff]]
- [[#switch-kernels-on-arch-linux][Switch Kernels on Arch Linux]]
  - [[#steps-to-switch-kernels][Steps to switch kernels]]
- [[#xrandr---manage-displays][xrandr - (manage displays)]]
- [[#pacman---arch-package-manager][pacman - (Arch package manager)]]
  - [[#update-the-package-database][Update the package database:]]
  - [[#upgrade-installed-package][Upgrade installed package:]]
  - [[#install-a-package][Install a package:]]
  - [[#remove-a-package][Remove a package:]]
  - [[#remove-a-package-and-it-dependencies][Remove a package and it dependencies:]]
  - [[#remove-a-package-its-dependencies-and-all-package-that-depend-on-it][Remove a package, its dependencies and all package that depend on it.]]
  - [[#search-for-a-package][Search for a package:]]
  - [[#show-information-about-a-package][Show information about a package:]]
  - [[#list-installed-package][List installed package]]
  - [[#list-orphaned-package][List orphaned package]]
  - [[#clean-package-caches][Clean package caches:]]
  - [[#clean-all-uninstalled-package-from-cache][Clean All Uninstalled package from Cache:]]
  - [[#list-explicity-installed-package][List explicity-installed package]]
  - [[#identify-orphaned-packages][Identify Orphaned packages:]]
  - [[#remove-orphaned-packages][Remove Orphaned Packages:]]
- [[#pactree---display-tree-dependencies][pactree - (display tree dependencies)]]
  - [[#syntax][Syntax]]
  - [[#display-reverse-dependencies][Display reverse dependencies]]
  - [[#display-dependencies][Display dependencies]]
  - [[#example][example]]
- [[#aur-helper][AUR Helper]]
  - [[#paru][paru]]
  - [[#yay][yay]]
- [[#apache-service][Apache Service]]
- [[#enable-ssh][Enable SSH]]
- [[#auto-mount-drives-in-linux-on-boot][Auto Mount Drives in Linux on Boot]]
  - [[#step1][Step1:]]
  - [[#step2][Step2:]]
  - [[#step3][Step3:]]
  - [[#step4][Step4:]]
  - [[#step5][Step5:]]

* LINUX FILE SYSTEM
Linux file system contains
- The root directory (/).
- A specific data storage format (EXT3, EXT4, BTRFS, XFS & so on).
- A partition or logical volume having a particular file system.

** Directory Structure
***  /
Root file system

*** /boot
Include the static kernel and bootloader configuration and executable file needed to start a linux.

*** /bin
Executable file

*** /dev
Include the device file for all hardware devices connected to the system there aren't device drivers, instead they are files that indicate all devices on the system and provided access to there devices.

*** /etc
Include the local system configuration file for the host system.

*** /lib
Include shared library files that are needed to start the system.

*** /home
Home directory storage is available for user file all users have subdirectory inside /home

*** /mnt
Temporary mount point for basic file system.

*** /media
Mounting external removable media devices like USB thumb drives that might be linked to the host.

*** /opt
Vendor supplied application program that must be placed.

*** /root
Its the home directry for a root user.

*** /tmp
temporary directory used by the OS and several program for storing temprory file.

*** /sbin
These are system binary file they are executable utilized for system administration.

*** /usr
They are read only and shareable files, including executable libraries and binaries, man files and several documentation types.

*** /var
Variable data files are saved contain MySQL, log file , etc..


** Linux File System features
+ Specifying paths
+ Partition, directories & drives.
+ Case sensitivity.
+ File extensions.
+ Hidden Files.

* TYPES OF LINUX FILE SYSTEM
** Ext, Ext2, Ext3 & Ext4 file system
+ Extended file system
+ The ext4 file system is *a scalable extension of the ext3 file system,* which was the default file system of Red Hat Enterprise Linux 5.
+ Ext4 is the default file system of Red Hat Enterprice Linux 6, and can support file and file systems up to 16 terabytes in size.

** JFS file system
+ Journaled file system
+ stability is needed with few resources.
+ handy file system when CPU power is limited.

** ReiserFS file system
** XFS file system
** BTRFS file system
** swap file system

* Display server protocols 
** X11
+ By design, X11 is *network-transparent*.
+ This allows the possibility of running the client and the server either on the same machine or different ones.
+ A client and a server can also communicate over the internet through an encrypted network session.

  [[./img/x11.png]]

** Wayland
+ Wayland is *a communication protocol that specifies the communication between a display server and its clients, as well as a C library implementation of that protocol.*
+ A display server using the wayland protocol is called a wayland compositor, because it additionally performs the task of a compositing window manager.

  [[./img/wayland.png]]

* Kernel 
+ Kernel is the main component of a linux operating system(OS) and is the core interface between a computer's hardware and it's process.
+ It communicates between the 2, managing resources as efficiently as possible.

** Types of Kernel
*** Stable
+ Vanilla Linux kernel and modules, with a few patches applied.
+ The stable kernel is also the default kernel in most linux distributions, and it is supported by the community and the kernel developers.

[[https://www.kernel.org][stable-kernel website]]

*** Hardened
+ A security-focused Linux kernel applying a set of hardening patches to mitigate kernel and userspace exploits. It also enable more upstream kernel hardening features the linux.
+ The term kernel hardening refers to a strategy of using specific kernel configuration options to limit or prevent certain types of cyber attacks.

[[https://githum.com/anthraxx/linux-hardened][hardened kernel github]]

*** Longterm
+ Long-term support(LTS) linux kernel and modules.
+ Longterm(LTS) are usually several "longterm maintenance" kernel releases provided for the purpose of backporting bugfixes for older kernel trees.
+ Only important bugfixes are applied to such kernels and they don't usually see very frequent releases, especially for older trees.

[[https://www.kernel.org][longterm kernel website]]

*** Zen Kernel
+ Result of a collaborative effort of kernel hackers to provide the best linux kernel possible for everyday systems.
+ Zen-kernel is a series of patches and improvements that were made to the original linux kernel to imporve the performance and reactivity of the system.

  [[https://github.com/zen-kernel/zen-kernel][zen kernel github]]
 
*** Realtime kernel 
+ Maintained by a small group of core developers led by Ingo Molnar. 
+ This patch allows nearly all of the kernel to be preempted, with the exception of a few very small regions of code.
+ This is done by replacing more kernel spinlocks with mutexes that support priorty inheritance, as well as moving all interrupt and software interrupts to kernel threads.

* Bootloader
+ Boot Loader is *a software program that is responsible for "actually loading" the operating system once the boot manager has finished its work*. And by loading operating system we mean "loading the kernel of the operating system". 
+ For Linux, the two most common boot loaders are known as *LILO(linux LOader) and LOADLIN(LOAD LINux).
+ An alternative boot loader, called GRUB(GRand Unified Bootloader), is used with Red Hat Linux.

** Tpyes of Bootloader
*** GNU GRUB
+ GNU GRUB (short for GNU GRand Unified Bootloader, commonly referred to as GRUB) is a boot loader package from the GNU project.
+ GRUB is the program of linux systems that *loads and manages the boot process*.
+ It also *lets you easily an entry on the fly, or drop down into the command interface*. In addition, if you are using the menu interface and something goes wrong, GRUB automatically puts you into the command interface so you can attempt to recover and boot menually.
+ GRUB offers several advantages over other boot loaders. *It can boot multiple operating systems, allowing users to select with OS they would like to boot at startup.*. It also supports a variety of file systems, making it compatible with a wide range of storage devices.

  [[./img/grub.png]]

*** systemd-boot
+ systemd-boot is *a free and open-source boot manager created by obsoleting the gummiboot project and merging it into systemd in May 2015*.
+ systemd-boot previously called *gummiboot*, is an easy-to-configure UEFI boot manager. It provied a textual menu to select the boot entry and an editor for the kernel command line. 
+ It is uncomplicated and uses simple text file which only contain a few lines.
  
  [[./img/systemd-boot.png]]

*** rEFInd Boot Manager
*** LILO (Linux Loader)
*** BURG - New Boot Loader
*** Syslinux

* LINUX COMMANDS
** sudo
let us use our account and password to execute system commands with root privileges.
*** syntax
#+begin_example
$ sudo [option] [command]
#+end_example

| option  | function    |
|---------+-------------|
| -v      | version     |
| -l      | information |

** whoami
print effective user name

#+begin_example
$ whoami
#+end_example

** man
An interface to the system reference manuals

#+begin_example
$ man du
#+end_example

** clear
Clear teh terminal screen.

#+begin_example
$ clear
#+end_example

** pwd
Print the current folder path.

#+begin_example
$ pwd
#+end_example

** ls
list directory contents

*** Syntax
#+begin_example
$ ls [option] [folder]
#+end_example

| option  | description                  |
|---------+------------------------------|
| /path   | list the content of the path |
| -l      | long format                  |
| -a      | all file including .file     |
| -h      | human readable               |
| -r      | reverse                      |
| -s      | size                         |

** cd
change directory

*** Syntax
#+begin_example
$ cd [directory]
#+end_example

| cd Desktop      | move to desktop                                 |
| cd..            | travel back by one directory                    |
| cd or cd~       | go to home directory                            |
| cd ../../OTHERS | go to OTHERS folder by passing parent directory |

** mkdir
Make directories

| Command                       | Description                                 |
|-------------------------------+---------------------------------------------|
| mkdir coding                  | make a directory by name coding             |
| mkdir winter summer           | make multiple folder winter and summer      |
| mkdir summer/seeds            | make seed directory inside summer directory |
| mkdir -p summer/seeds/lettuce | make parent directory as needed             |

** touch
Change file timestamp or create empty file.

| Command                   | Description     |
|---------------------------+-----------------|
| touch note.txt            | empty note file |
| touch note1.txt note2.txt | multiple file   |

** rmdir
remove directory if it is empty.

#+begin_example
$ rmdir coding
#+end_example

** rm
Remove file or directories

*** Syntax
#+begin_example
$ rm [option] [file]
#+end_example

| option       | Description                                       |
|--------------+---------------------------------------------------|
| -v           | explain what is being done                        |
| -r , -R      | remove directories and their contents recursively |
| -i           | prompt before every removal                       |
| -f           | force                                             |

** open
Open file in its default application.

#+begin_example
$ open .                    // open current directory
$ open index.html           // open index.html file
#+end_example

** mv
Move (rename) files


| Command                   | Description                                        |
|---------------------------+----------------------------------------------------|
| mv jornal.txt journal.txt | rename file, renamed 'jornal.txt' -> 'journal.txt' |
| mv journal.txt stuff/     | it will move journal.txt into stuff folder         |
| mv cake cookie pie stuff/ | move multiple file in stuff folder                 |


| option       | Description         |
|--------------+---------------------|
| -v           | verbore             |
| -f           | force               |


** cp
Copy files and directoies.

| Command                        | Description                                                             |
|--------------------------------+-------------------------------------------------------------------------|
| cp note.txt book.txt           | it make book.txt file and copy content of note.txt to book file         |
| cp note.txt Documents/book.txt | it copy the content of note.txt to book.txt in a directory of Documents |


| option       | Description                |
|--------------+----------------------------|
| -r           | copy directory recursively |


** head
Output the first part of files

| Command             | Description                          |
|---------------------+--------------------------------------|
| head note.txt       | print first part of the note.txt     |
| head note.txt -n 20 | print first 20 line of note.txt file |

** tail
Output the last part of files

| Command             | Description                         |
|---------------------+-------------------------------------|
| tail note.txt       | print last part of the note.txt     |
| tail note.txt -n 20 | print last 20 line of note.txt file |

** date
Print or set the system date and time

#+begin_example
$ date
#+end_example

** redirecting standard output

| Command           | Description                                                        |
|-------------------+--------------------------------------------------------------------|
| >                 | redirect                                                           |
| date > today.txt  | redirect the output of date to today.txt file it override the file |
| >>                | redirect and append                                                |
| date >> today.txt | it append to the today.txt file                                    |
| 2>                | to redirect an error we need to use                                |
| 2>&1              | to redirect both error and output                                 |

** cat
Concatenate file and print on the standard output

print the content of note.txt
#+begin_example
$ cat note.txt
#+end_example

Print content of multiple file
#+begin_example
$ cat note1.txt note2.txt
#+end_example

Number all output line
#+begin_example
$ cat -n note.txt
#+end_example

** less
Show content stored inside a file in nice and interactive UI
#+begin_example
$ less note.txt
#+end_example

** more
Display content of a file in a terminal.
#+begin_example
$ more note.txt
#+end_example

** echo
Display the line of text.
#+begin_example
$ echo "hello"
#+end_example

redirect to config.txt
#+begin_example
$ echo "the centent line" > config.txt
#+end_example

append
#+begin_example
$ echo "next line" >> config.txt
#+end_example

** wc
Print new line, word & byte counts for each file.
#+begin_example
$ wc note.txt
#+end_example

| Option       | Description     |
|--------------+-----------------|
| -w           | word count      |
| -l           | newline count   |
| -m           | character count |
| -c           | byte count      |

** piping ( | ) 
It is used to combin two or more command together. the output of the first command will be input for second command.

print the number of line of ls output
#+begin_example
$ ls -l | wc
#+end_example

Print the number of line in the text.txt and note.txt file combine
#+begin_example
$ cat text.txt note.txt | wc -l
#+end_example

** sort
Sort line of text files

*** syntax
#+begin_example
$ sort [option] [file]
#+end_example

| Option   | Description  |
|----------+--------------|
| -f       | ignore case  |
| -n       | numeric sort |
| -r       | reverse      |
| -u       | unique       |

** uniq
Report or omit repeated lines.
#+begin_example
$ uniq sname.txt

$ sort sname.txt | uniq
#+end_example


| Option   | Description                 |
|----------+-----------------------------|
| -d       | only print duplication line |
| -u       | only print unique line      |
| -c       | number of occurrences       |

#+begin_example
$ sort sname.txt | uniq -d
#+end_example

** expansion
+ /home/xander
#+begin_example
$ echo ~            
#+end_example

+ path set in the system
#+begin_example
$ echo $PATH
#+end_example

+ print user name
#+begin_example
$ echo $USER
#+end_example

+ display every file and folder in the current directory
#+begin_example
$ echo *
#+end_example

+ all the .txt file in current directory
#+begin_example
$ echo *.txt
#+end_example

+ list all the file with .txt
#+begin_example
$ ls -l *.txt
#+end_example

+ ? -> anycharacter
#+begin_example
echo *.???
#+end_example

+ remove any file with any name with only two letter extention
#+begin_example
$ rm *.??
#+end_example

#+begin_example
$ echo {a, b, c}

o/p
a b c

$ echo {a,b,c}.txt
o/p
a.txt b.txt c.txt
#+end_example

print all file and diretory with first letter 'f'
#+begin_example
$ echo f*
#+end_example

** diff
Compase file line by line.
#+begin_example
$ diff note.txt book.txt
#+end_example

** find
find the files in a directory hierarchy.

+ find the file name with extension .js in current directory
#+begin_example
$ find . -name '*.js'
#+end_example

+ find the file in /home/xander directory
#+begin_example
$ find /home/xander -name '*.txt'
#+end_example

+ find the directory
#+begin_example
$ find . -type d -name '*d+'
#+end_example

+ case insensitive
#+begin_example
$ find . -type d -iname '*d+'
#+end_example

+ find the file which start with E or F
#+begin_example
$ find . -name 'E*' -or -name 'F*'
#+end_example

+ find the file whose size greater than 100k
#+begin_example
$ find -type f -size -100k
#+end_example

+ 100k < file < 1M
#+begin_example
$ find . -type f -size +100k -size -1M
#+end_example

+ find edited more than 3 days ago
#+begin_example
$ find . -type f -mtime +3
#+end_example

\; terminating
+ execute command on each result of search
#+begin_example
$ find . -type f -exec cat {}\;
#+end_example

** grep
Print lines that match patterns

*** Syntax
grep [option] pattern [file]
grep [option] -e patterns [file]
grep [option] -f pattern_file [file]

#+begin_example
$ grep display style.css
#+end_example

| Option   | Description  |
| ........ | ............ |
| -n       | line number  |
| -c       | context      |
| -r       | recursively  |

#+begin_example
$ grep -rE -o "[regEx expression]"
#+end_example

** du
Estimate file space usage

#+begin_example
$ du                     // space usege of all file

$ du index.html         // space usage of index file
#+end_example

| Option | description    |
|--------+----------------|
| -m     | MB             |
| -g     | GB             |
| -h     | human readable |

#+begin_example
$ du -h | sort -h        // space usage & sort in human readable
#+end_example

** df
report file system space usege or disk usage

#+begin_example
$ df         // show all file
 
$ df Documents/    // show Documents file
#+end_example


** history
Show & manipulate command history.

#+begin_example
$ history
#+end_example

** ps
Report a snapshot of the current process

#+begin_example
$ ps

$ ps ax            // all the process
 
$ ps axww         // wrap around
#+end_example

** top
display linux process

#+begin_example
$ top
#+end_example

** htop
interative process viewer

#+begin_example
$ htop
#+end_example

** kill
Terminate a process

#+begin_example
$ kill -l          // list signal name

$ kill [pid]      // process id -> pid

$ kill -9 [pid]  
#+end_example

** killall 
kill process by name.

#+begin_example
$ killall -9 node

$ killall [processname]
#+end_example

** job, bg & fg
jobs -> print currently running jobs.
bg -> send file to background.
fg -> bring jobs to foreground.

#+begin_example
$ jobs

$ fg 2
 
$ bg 1
#+end_example

where 2 & 1 are jobs number.

** sleep
Delay for a specifield amount of time.

#+begin_example
$ sleep 4         // 4 is in seconds
#+end_example

** gzip
Compress files

#+begin_example
$ gzip [filename]       // compress & replace the file, with .gz

$ gzip -k profiet.txt  
#+end_example

| Option | Description                                         |
|--------+-----------------------------------------------------|
| -k     | keep input file during compression                  |
| -d     | decompress                                          |
| -v     | display name and percentage reduction for each file |

** gunzip
expand file

#+begin_example
$ gunzip project.txt.gz
#+end_example

** zip & unzip
zip - package & compress(archive) files.
unzip - list, test & extract compressed file in a zip archive

** tar
An archiving utility.

#+begin_example
$ tar -cf archive.tar index.htm style.css

$ tar -tf archive.tar     // to view content of file

$ tar -xf archive.tar    // to extract the tar file

$ tar -xf archive.tar  -c [directory]   // to extract in other location.

$ tar -czf archive.tar.gy file1 file2       // compressed archive

$ tar -xf archive.tar.gz  
#+end_example

| Option | Description |
|--------+-------------|
| -c     | to create   |
| -f     | file        |
| -z     | zip         |


** alias
Create a function.

*** Syntax
#+begin_example
$ alias [name]=[defination]
#+end_example

#+begin_example
$ alias ll='ls -la'
#+end_example

** xargs
Buid & execute command line from standard input

#+begin_example
$ cat deadPlayers.txt | xargs rm   // the o/p of cat command will be argument of rm

$ find . -size +1M | xargs ls -lh
#+end_example

** ln
Make a links between files

*** hard link
A hard link *always points a filename to data on a storage device.*

#+begin_example
$ ln original.txt hardlink.txt
#+end_example

*** symbolic link
A soft link *always points a filename to another filename, which then points to information on a storage device.*

#+begin_example
$ ln -s original.txt symlink.txt
#+end_example

** who
displays the user logged in to the system.

#+begin_example
$ who
#+end_example

** su
Switch user

#+begin_example
$ su [username]
#+end_example

** passwd
password

#+begin_example
$ passwd
#+end_example

** chown
Change file owner & group

*** syntax
#+begin_example
$ chown [owner] [file]
#+end_example

#+begin_example
$ sudo chown xander /project
#+end_example

*** syntax
#+begin_example
$ chown [owner]:[group] [file]
#+end_example

** chmod
Change file mode bits

#+begin_example
$ chmod g+w file.txt

$ chmod a-w file.txt   // remove write permittion from all
#+end_example

| number | file mode |
|--------+-----------|
|      0 | _ _ _     |
|      1 | _ _ x     |
|      2 | _ w _     |
|      3 | _ w x     |
|      4 | r _ _     |
|      5 | r _ x     |
|      6 | r w _     |
|      7 | r w x     |

#+begin_example
$ chmod 711 file.txt

$ chmod a=r file.txt  // it set all read only   
#+end_example

u - Owner , g - Group , o - Others , a - All(owner, groups, others)

** wget
download the resource
*** Syntax
#+begin_example
$ wget [option] [url]
#+end_example

*** Example
+ save at specific location
#+begin_example
$ wget -p [path] [url]
#+end_example

** curl
Download the resources.
*** syntax
#+begin_example
$ curl [option] [url]
#+end_example

*** Example
+ to download the file to your local system
#+begin_example
$ curl [url]>[local-file]
#+end_example

** lf
Terminal file manager.

#+begin_example
$ lf
#+end_example

** gdu
disk usage

#+begin_example
$ gdu
#+end_example

** neofetch

System general information.

#+begin_example
$ neofetch
#+end_example

** lshw
Fetch important hardware information, such as memory, cpu, disk, etc..

#+begin_example
$ sudo lshw
#+end_example

+ short summary
#+begin_example
$ lshw short
#+end_example

** lscpu
CPU information

#+begin_example
$ lscpu
#+end_example

** lsblk
Block device information

#+begin_example
$ lsblk

$ lsblk -a      // all information
#+end_example

** lsusb
USB device information

#+begin_example
$ lsusb
#+end_example

** ifconfig
Information about all active network interface.

#+begin_example
$ ifconfig
#+end_example

| Optoin | Description             |
|--------+-------------------------|
| -s     | shortlist               |
| -v     | verbose                 |
| -a     | every network interface |

** free 
View amount of memory available on system.
#+begin_example
$ free
#+end_example

** lspci
 Check PCI device

#+begin_example
$ lspci
#+end_example

** lsscsi
Check SCSI device

#+begin_example
$ lsscsi
#+end_example

** hdparm
Check SATA devices

#+begin_example
$ sudo hdparm /dev/sda1
#+end_example

** fdisk
File system information

#+begin_example
$ sudo fdisk -l
#+end_example

** dmidecode
Hardware components info

#+begin_example
$ sudo dmidecode -t memory    // memory

$ sudo dmidecode -t system   // system

$ sudo dmidecode -t bios    // bios

$ sudo dmidecode -t processor  // processor
#+end_example

** ip 
show / manipulate routing, networking devices, interface and tunnels

*** Syntax
#+begin_example
$ ip [Option] OBJECT {COMMAND | help}
#+end_example

*** example
#+begin_example
$ ip a 
#+end_example

** hostname
display hostname

#+begin_example
$ hostname
#+end_example

+ to display ip address
#+begin_example
$ hostname -I
#+end_example

** locate
search for file & directories.

*** Syntax
#+begin_example
$ locate [option] [pattern]
#+end_example

*** example
#+begin_example
$ locate .bashrc
#+end_example

** bpytop
Better interactive process view

#+begin_example
$ bpytop
#+end_example

** fzf
find the file location

#+begin_example
$ fzf
#+end_example

** ripgrep
recursively searches for regex pattern

#+begin_example
$ rg port /etc/ssh/sshd_config

$ rg hello
#+end_example

** z oxide
navigate to directories

#+begin_example
$ z config

$ z etc ssh        // command get bact to /etc/ssh

$ zi ssh           // interactive searches with fzf
#+end_example

** bat
Rust alternative for cat command

#+begin_example
$ bat
#+end_example

** exa
Rust alternative for ls command

#+begin_example
$ exa
#+end_example

** speedtest
Test the internet speed up and down

#+begin_example
$ speedtest
#+end_example

** route
The route command is the interface used to access the linux kernel's routing tables.

#+begin_example
$ route [option]
#+end_example

| key | Description                          |
|-----+--------------------------------------|
| -v  | verbose                              |
| -n  | don't resolve names                  |
| -e  | display forwarding information base  |
| -C  | display routing cache instead of FIB |

** uname
uname prints the *kernel* name

#+begin_example
$ uname [option1] [option2]
#+end_example

#+begin_example
$ uname
#+end_example

| Option | Desription                           |
|--------+--------------------------------------|
| -a     | Prints all system information        |
| -s     | prints kernel name                   |
| -n     | prints network node hostname         |
| -r     | print the kernel release number      |
| -v     | print the kernel version             |
| -m     | output the machine architecture type |
| -p     | print the CPU type                   |
| -i     | print hardware platform type         |
| -o     | print the operating system name      |

** nice
run a program with modified scheduling priority

*** Syntax
#+begin_example
$ nice [OPTION] [COMMAND [ARG]...]
#+end_example

#+begin_example
$ nice -n nice_value command
#+end_example

** renice
alter priority of running processes

*** Syntax
renice [--priority|--relative] priority [-g|-p|-u] identifier...

#+begin_example
$ sudo renice -n nice_value -p process_id
#+end_example

** tree
List the content of the directories in a tree like format.

*** Syntax
#+begin_example
$ tree [option] [directory]
#+end_example

| keys     | description                                                     |
|----------+-----------------------------------------------------------------|
| -a       | All files are listed including hidden file                      |
| -L level | Descend only level directories deep                             |
| -d       | Display directories only, not files                             |
| -f       | print the full path prefix for each file.                       |
| -h       | print size in a human-readable format                           |
| -p       | print a grand total of file and/or directory size after listing |

+ display the directory tree of the current directory
#+begin_example
tree
#+end_example 
 
+ display the tree for a specific directory:
#+begin_example
$ tree /path/to/directory
#+end_example 

+ display the tree with a specific depth:
#+begin_example
$ tree -L 2
#+end_example

+ Display the tree for a specific directory and save it to a file:
#+begin_example
$ tree /path/to/directory > tree_structure.txt
#+end_example

** arp
Manipulate the system ARP cache.

*** example
this command with show the ip address link with the MAC address of the system
#+begin_example
$ arp -a 
#+end_example

** cut
remove sections from each line of files

*** Syntax
#+begin_example
$ cut OPTION [FILE]
#+end_example

** time
measure how long a command or block takes

*** Syntax
#+begin_example
$ time command
#+end_example

*** Example
#+begin_example
$ time python main.py
#+end_example

** xdg-open
open a file or URL in the user's preferred application

*** Syntax
#+begin_example
$ xdg-open {file| url}
#+end_example

*** example
#+begin_example
$ xdg-open index.html
#+end_example

** sensors
print sensors information

*** Syntax
#+begin_example
$ sensors [ options ] [ chips ]
$ sensors -s [ chips ]
$ sensors --bus-list
#+end_example

*** example
#+begin_example
$ sensors
#+end_example

** iwconfig
configure a wireless network interface

*** example
#+begin_example
$ iwconfig

$ iwconfig wlp3s0
#+end_example

** wavemon
A wireless network monitor

#+begin_example
$ wavemon
#+end_example

** getfacl
Get file access control lists
#+begin_example
$ getfacl <file_name>
#+end_example

** shred
overwrite a file to hide its contents, and optionally delete it
*** Syntax
#+begin_example
$ shred [OPTION] file
#+end_example

*** Example
+ shred the file
#+begin_example
$ shred <file_name>
#+end_example

+ shred and remove the file
#+begin_example
$ shred --remove <file_name>
#+end_example

** file
Determine file type
#+begin_example
$ file <file_name>
#+end_example

** netstat
Print network connections, routing tables, interface statistics, masquerade connections, and multicast member-ships

*** Syntax
#+begin_example
$ netstat [options]
#+end_example

| options | Description                                     |
|---------+-------------------------------------------------|
| a       | display all connections                         |
| l       | display listening ports                         |
| n       | active connections                              |
| p       | display PID and program name for connections    |
| s       | display network statistics                      |
| r       | display routing table                           |
| tulpn   | show listening sockets with process information |
| 4       | display only IPv4 connections                   |
| 6       | display only IPv6 connections                   |

** sed
Stream editor for filtering and transforming text

*** Syntax
#+begin_example
$ sed [options] 'command' <file_name>
#+end_example

*** example
+ Search and replace
#+begin_example
$ sed 's/pattern/replacement/g' filename
#+end_example

+ In-place editing (replace in the same file):
#+begin_example
$ sed -i 's/pattern/replacement/g' filename
#+end_example

+ Print specific lines:
#+begin_example
$ sed -n '2,5p' filename
#+end_example
 
+ delete line matching a pattern
#+begin_example
$ sed '/pattern/d' filename
#+end_example

+ Insert text before or after a line:
#+begin_example
$ sed '/pattern/i\text_to_insert' filename
$ sed '/pattern/a\text_to_insert' filename
#+end_example

+ substitute using capture groups
#+begin_example
$ sed 's/\(pattern1\)\(pattern2\)/\2\1/g' filename
#+end_example

+ printing line number
#+begin_example
$ sed -n '10,20p' filename
#+end_example

+ Delete empty lines
#+begin_example
$ sed '/^$/d' filename
#+end_example

** ping
Send ICMP ECHO_REQUEST to network hosts

*** Syntax
#+begin_example
$ ping <host_name or IP_address>
#+end_example

*** Example
+ Specifying number of packets:
#+begin_example
$ ping -c <count> <host_name or IP_address>
#+end_example

+ Setting time interval between packets
#+begin_example
$ ping -i <interval> <host_name or IP_address>
#+end_example

+ Continuous ping
#+begin_example
$ ping -t <host_name or IP_address>
#+end_example

+ IPv6 ping
#+begin_example
$ ping6 <host_name or IP_address>
#+end_example

+ Timeout Setting
#+begin_example
$ ping -W <timeout> <hostname_or_IP_address>
#+end_example

+ Numeric output
#+begin_example
$ ping -n <hostname_or_IP_address>
#+end_example

+ Verbose output
#+begin_example
$ ping -v <hostname_or_IP_address>
#+end_example

* RANGER (File Manager)
Terminal file manager

#+begin_example
$ ranger
#+end_example

| Keys    | Description                |
|---------+----------------------------|
| h j k l | back , down , up , forward |
| gg      | go to the top              |
| i       | preview file               |
| r       | open file                  |
| zh      | view hidden file           |
| cw      | rename current file        |
| yy      | (yank) copyfile            |
| dd      | cut file                   |
| pp      | past file                  |
| u       | undo                       |
| z       | changing settings          |
| dD      | delete file                |

* Changing default shell
** list the shell in system

#+begin_example
$ chsh -l
#+end_example

** select the path from the option given

#+begin_example
$ chsh -s /bin/fish
#+end_example


* NETWORK MANAGER (to connect to wifi)

** Connect to wifi
#+begin_example
$ nmcli dev wifi connect "<ssid>" password "<password>"
#+end_example

** Delete the network
#+begin_example
$ nmcli con delete "<ssid>"
#+end_example

** Disconnect
#+begin_example
$ nmcli con down <wifi-name>
#+end_example

** Check wifi connection
#+begin_example
$ nmcli con
#+end_example

** Check available wifi
#+begin_example
$ nmcli d wifi list
#+end_example

** Turn on wifi
#+begin_example
$ nmcli r wifi on
#+end_example

** Turn off wifi
#+begin_example
$ nmcli r wifi off
#+end_example

** Show password
#+begin_example
$ nmcli device wifi show-password
#+end_example

* BLUETOOTH MANAGER
** Check bluetooth status
#+begin_example
$ sudo systemctl status bluetooth
#+end_example

** Enable service
#+begin_example
$ sudo systemctl enable bluetooth
#+end_example

** Start bluetooth
#+begin_example
$ sudo systemctl start bluetooth
#+end_example

** Scan
#+begin_example
$ bluetoothctl scan on
#+end_example

** Discoverable to other devices
#+begin_example
$ bluetoothctl discoverable on 
#+end_example

** Pair device
#+begin_example
$ bluetoothctl pair <device-id>
#+end_example

** Connect device
#+begin_example
$ bluetoothctl connect <device-id>
#+end_example

** List pair device
#+begin_example
$ bluetoothctl paired-devices
#+end_example

** List devices within bluetooth range
#+begin_example
$ bluetooth devices

$ bluetoothctl <option> <device-id>
#+end_example


** option
*** trust
*** remove
*** block
*** untrust
*** disconnect


* VIM / NEOVIM
** Global

| Command         | description            |
|-----------------+------------------------|
| :h[elp] keyword | open help for keyword  |
| :sav[eas] file  | save file as           |
| :clo[se]        | close current pane     |
| :ter[minal]     | open a terminal window |
| :w              | save file              |
| :wq             | save & exit            |
| :q              | exit                   |
| :!q             | exit without saving    |
| :x              | save & exit            |
| ZZ              | save & exit            |
| ZQ              | exit without saving    |
| :qa             | close all files       |

** Cursor Movement

| Command   | Description                                                           |
|-----------+-----------------------------------------------------------------------|
| h         | move cursor left                                                      |
| j         | move cursor down                                                      |
| k         | move cursor up                                                        |
| l         | move cursor right                                                     |
| gj        | move cursor down multi-line text                                      |
| gk        | move cursor up multi-line text                                        |
| H         | move to top of screen                                                 |
| M         | move to middle of screen                                              |
| L         | move to bottom of screen                                              |
| w         | jump forward to the start of word                                     |
| W         | jump forward to the start of a word ( word can contain punctuation )  |
| e         | jump forward to the end of a word                                     |
| E         | jump forward to the end of a word ( word can contain punctuation )    |
| b         | jump backward to the start of a word                                  |
| B         | jump backward to the start of a word ( word can contain punctuation ) |
| ge        | jump backwards to the end of a word                                   |
| gE        | jump backwards to the end of a word ( word can contain punctuatin )   |
| %         | move cursor to matching character eg: '()' '{}' '[]'                  |
| 0         | jump to the start of the line                                         |
| ^         | jump to the first non-blank character of the line                     |
| $         | jump to the end of the line                                           |
| g_        | jump to the last non-blank character of the line                      |
| gg        | go to the first line of the document                                  |
| G         | go to the last line of the document                                   |
| 5gg or 5G | go to line 5                                                          |
| gd        | move to local declaration                                             |
| gD        | move to global declaration                                            |
| fx        | jump to next occurrence of character x                                |
| tx        | jump to before next occurrence of character x                         |
| Fx        | jump to the previous occurrence of character x                        |
| Tx        | jump to after previous occurrence of character x                      |
| ;         | repeat previous f,t,F or T movement                                   |
| ,         | repeat previous f,t,F or T movement backwards                         |
| }         | jump to next paragraph                                                |
| {         | jump to previous paragraph                                            |
| zz        | center cursor on screen                                               |
| zt        | position cursor on top of the screen                                  |
| zb        | position cursor on bottom of the screen                               |
| ctrl + e  | move screen down one line                                             |
| ctrl + y  | move screen up on line                                                |
| ctrl + b  | move screen up one page                                               |
| ctrl + f  | move screen down one page                                             |
| ctrl + d  | move cursor & screen down 1/2 page                                    |
| ctrl + u  | move cursor & screen up 1/2 page                                      |
 
** INSERT MODE - inserting/appending text

| Command         | Description                                                                |
|-----------------+----------------------------------------------------------------------------|
| i               | insert before the cursor                                                   |
| I               | insert at the beginning of the line                                        |
| a               | insert (append) after the cursor                                           |
| A               | insert (append) at the end of line                                         |
| o               | append (open) a new line below the current line                            |
| O               | append (open) a new line above the current line                            |
| ea              | insert (append) at the end of the word                                     |
| ctrl + h        | delete the character before the cursor during insert mode                  |
| ctrl + w        | delete word before the cursor during insert mode                           |
| ctrl + j        | add a line break at the cursor position during insert mode                 |
| ctrl + t        | indent (move right) line one shiftwidth during insert mode                 |
| ctrl + d        | de-indent (move left) line one shiftwidth during insert mode               |
| ctrl + n        | insert (auto-complete) next match before the cursor during insert mode     |
| ctrl + p        | insert (auto-complete) previous match before the cursor during insert mode |
| ctrl + rx       | insert the contents of register x                                          |
| ctrl + ox       | Temporarily enter normal mode to issue one normal-mode command x           |
| Esc or ctrl + c | exit insert mode                                                           |

** EDITING
 
| Command  | Description                                                  |
|----------+--------------------------------------------------------------|
| r        | replace a single character                                   |
| R        | replace more than one character, until ~ESC~ is pressed      |
| J        | join line below to the current one with one space in between |
| gJ       | join line below to the current one without space in between  |
| gwip     | reflow paragraph                                             |
| g~       | switch case up to motion                                     |
| gu       | change to lowercase up to motion                             |
| gU       | change to uppercase up to motion                             |
| cc       | change (replace) entire line                                 |
| c$ or C  | change (replace) to the end of the line                      |
| ciw      | change (replace) entire word                                 |
| cw or ce | change (replace) to the end of the word                      |
| s        | delete character and substitute text                         |
| S        | delete line and substitute text                              |
| xp       | transpose two letters (delete and paste)                     |
| u        | undo                                                         |
| U        | restore (undo) last changed line                             |
| ctrl + r | redo                                                         |
| .        | repeat last command                                          |

** MARKING TEXT (Visual mode)
 
| Command        | Description                                     |
|----------------+-------------------------------------------------|
| v              | start visual mode, mark lines, then do  command |
| V              | start linewise visual mode                      |
| o              | move to other end of marked area                |
| ctrl + v       | start visual block mode                         |
| O              | move to other corner of block                   |
| aw             | mark a word                                     |
| ab             | a block with ()                                 |
| aB             | a block with {}                                 |
| at             | a block with <> tags                            |
| ib             | inner block with ()                             |
| iB             | inner block with {}                             |
| it             | inner block with <> tags                        |
| Esc or ctrl +c | exit visual mode                                |

** VISUAL COMMANDS

| Command | Description                     |
|---------+---------------------------------|
| >       | shift text right                |
| <       | shift text left                 |
| y       | yank (copy) marked text         |
| d       | delete marked text              |
| ~       | switch case                     |
| u       | change marked text to lowercase |
| U       | change marked text to uppercase |

** REGISTERS

| Command      | Description                              |
|--------------+------------------------------------------|
| :reg[isters] | show registers content                   |
| "xy          | yank into register x                     |
| "xp          | paste contents of register x             |
| "+y          | yank into the system clipboard register  |
| "+p          | paste from the system clipboard register |

** MARKS & POSITIONS

| Command  | Description                                        |
|----------+----------------------------------------------------|
| :marks   | list of marks                                      |
| ma       | set current position for mark A                    |
| `a       | jump to position of mark A                         |
| y`a      | yank text to position of mark A                    |
| `0       | go to the position where Vim was previously exited |
| `"       | go to the position when last editing this file     |
| `.       | go to the position of the last change in this file |
| ``       | go to the position before the last jump            |
| :ju[mps] | list of jumps                                      |
| ctrl + i | go to newer position in jump list                  |
| ctrl + o | go to older position in jump list                  |
| :changes | list of changes                                    |
| g,       | go to newer position in change list                |
| g;       | go to older position in change list                |
| ctrl + ] | jump to the tag under cursor                       |

** MACROS

| Command | Description          |
|---------+----------------------|
| qa      | record macro a       |
| q       | stop recording macro |
| @a      | run macro a          |
| @@      | rerun last run macro |

** CUT & PASTE

| Command         | Description                                                                                    |
|-----------------+------------------------------------------------------------------------------------------------|
| yy              | yank (copy) a line                                                                             |
| 2yy             | yank (copy) 2 lines                                                                            |
| yw              | yank (copy) the characters of the word from the cursor position to the start of the next word  |
| yiw             | yank (copy) word under the cursor                                                              |
| yaw             | yank (copy) word under the cursor and the space after or before it                             |
| y$ or Y         | yank (copy) to end of line                                                                     |
| p               | put (paste) the clipboard after cursor                                                         |
| P               | put (paste) before cursor                                                                      |
| gp              | put (paste) the clipboard after cursor and leave cursor after the new text                     |
| gP              | put (paste) before cursor and leave cursor after the new text                                  |
| dd              | delete (cut) a line                                                                            |
| 2dd             | delete (cut) 2 line                                                                            |
| dw              | delete (cut) the characters of the word from the cursor position to the start of the next word |
| diw             | delete (cut) word under the cursor                                                             |
| daw             | delete (cut) word under the cursor and the space after or before it                            |
| :3,5d           | delete lines starting from 3 to 5                                                              |
| :g/{pattern}/d  | delete all lines containing pattern                                                            |
| :g!/{pattern}/d | delete all lines not containing pattern                                                        |
| d$ or D         | delete (cut) to the end of the line                                                            |
| x               | delete (cut) character                                                                         |

** INDENT TEXT

| Command | Description                                       |
|---------+---------------------------------------------------|
| >>      | indent (move right) line one shiftwidth           |
| <<      | de-indent (move left) line one shiftwidth         |
| >%      | indent a block with () or {} (cursor on brace)    |
| <%      | de-indent a block with () or {} (cursor on brace) |
| >ib     | indent inner block with ()                        |
| >at     | indent a block with <> tags                       |
| 3==     | re-indent 3 lines                                 |
| =%      | re-indent a block with () or {} (cursor on brace) |
| =iB     | re-indent inner block with {}                     |
| gg=G    | re-indent entire buffer                           |
| ]p      | paste and adjust indent to current line           |

** SEARCH & REPLACE

| Command        | Description                                                          |
|----------------+----------------------------------------------------------------------|
| /pattern       | search for pattern                                                   |
| ?pattern       | search backward for pattern                                          |
| \vpattern      | non-alphanumeric characters are interpreted as special regex symbols |
| n              | repeat search in same direction                                      |
| N              | repeat search in opposite direction                                  |
| :%s/old/new/g  | replace all old with new throughout file                             |
| :%s/old/new/gc | replace all old with new throughout file with confirmation           |
| :noh[lsearch]  | remove highlighting of search matches                                |
| :s/old/new/g   | replace all old with new throughout the line                         |
| :s/old/new/g 5 | replace all old with new in next 5 lines                             |
| :s/old/new     | replace only first match of old with new                             |

** SEARCH IN MULTIPLE FILES

| Command                       | Description                                  |
|-------------------------------+----------------------------------------------|
| :vim[grep]/pattern/{`{file}`} | search for pattern in multiple files         |
| :cn[text]                     | jump to the next match                       |
| :cp[revious]                  | jump to the previous match                   |
| :cope[n]                      | open a window containing the list of matches |
| :ccl[ose]                     | close the quickfix window                    |

** TABS

| Command                              | Description                                           |
|--------------------------------------+-------------------------------------------------------|
| :tabnew or :tabnew {page.words.file} | open a file in a new tab                              |
| ctrl + wT                            | move the currrent split window into its own tab       |
| gt or :tabn[ext]                     | move to the next tab                                  |
| gT or :tabp[revious]                 | move to the previous tab                              |
| #gt                                  | move to tab number #                                  |
| :tabm[ove] #                         | move current tab to the #th position (indexed from 0) |
| :tabo[nly]                           | close all tabs except for the current one             |
| :tabdo                               | command - run the command on all tabs                 |

** WORKING WITH MULTIPLE FILES

| Command            | Description                                                                      |
|--------------------+----------------------------------------------------------------------------------|
| :e[dit] file       | edit a file in a new buffer                                                      |
| :bn[ext]           | go to the next buffer                                                            |
| :bp[revious]       | go to the previous buffer                                                        |
| :bd[delete]        | delete a buffer (close a file)                                                   |
| :b[uffer]#         | go to a buffer by index #                                                        |
| :b[uffer] file     | go to a buffer by file                                                           |
| :ls or :buffers    | list all open buffers                                                            |
| :sp[lit] file      | open a file in new buffer and split window                                       |
| :vs[plit] file     | open a file in a new buffer and vertically split window                          |
| :vert[ical] ba[ll] | edit all buffers and vertical windows                                            |
| :tab ba[ll]        | edit all buffers as tabs                                                         |
| ctrl + ws          | split window                                                                     |
| ctrl + wv          | split window vertically                                                          |
| ctrl + ww          | switch windows                                                                   |
| ctrl + wq          | quit a window                                                                    |
| ctrl + wx          | exchange current window with next one                                            |
| ctrl + w=          | make all windows equal height & width                                            |
| ctrl + wh          | move cursor to the left window (vertical split)                                  |
| ctrl + wl          | move cursor to the right window (vertical split)                                 |
| ctrl + wj          | move cursor to the window below (horizontal split)                               |
| ctrl + wk          | move cursor to the window above (horizontal split)                               |
| ctrl + wH          | make current window full height at far left (leftmost vertical window)           |
| ctrl + wL          | make current window full height at far right (rightmost vertical window)         |
| ctrl + wJ          | make current window full width at the very bottom (bottommost horizontal window) |
| ctrl + wK          | make current window full width at the very top (topmost horizontal window)       |

** Diff

| Command          | Description                                 |
|------------------+---------------------------------------------|
| zf               | manually define a fold up to motion         |
| zd               | delete fold under the cursor                |
| za               | toggle fold under the cursor                |
| zo               | open fold under the cursor                  |
| zc               | close fold under the cursor                 |
| zr               | reduce (open) all folds by one level        |
| zm               | fold more (close) all folds by one level    |
| zi               | toggle folding functionality                |
| ]c               | jump to start of next change                |
| [c               | jump to start on previous change            |
| do or :diffg[et] | obtain (get) difference (from other buffer) |
| dp or :diffpu[t] | put difference (to other buffer)            |
| :diffthis        | make current window part of diff            |
| :dif[fupdate]    | update differences                          |
| :diffo[ff]       | switch off diff mode for current window     |

* Switch Kernels on Arch Linux

+ Check the kernel version by this command
> uname -r

** Steps to switch kernels
*** Step 1: Install the kernel of your choice
There are 4 types of kernel you can choose from.

#+begin_example
> sudo pacman -S linux

> sudo pacman -S linux-lts

> sudo pacman -S linux-hardened

> sudo pacman -S linux-zen
#+end_example

*** Step 2: Tweak the grub configuration file to add more kernel options
Follow this two steps
+ Disable grub submenu so that all the available kernel versions are shown on the main screen.
+ Configure grub to recall the last kernel entry you booted and use it as the default entry to boot from the next time.

make change in the grub file
> sudo nvim /etc/default/grub

add this line of code in the this file
#+begin_example
GRUB_DISABLE_SUBMENU=y
GRUB_DEFAULT=saved
GRUB_SAVEDEFAULT=true
#+end_example

+ the first and optional line is used to *disable the GRUB submenu*. 
+ The second line is used to *save the last kernel entry*.
+ last line ensure the GRUB will use as a *default the last saved entry*.

save and exit the configuration file.

*** Step 3: Re-generate the GRUB configuration file
To make the change effective you need to re-generate the configuration file.

> sudo grub-mkconfig -o /boot/grub/grub.cfg

Then the system will reboot

*select the kernel you want in your system.*

  [[./img/kernelswitch.jpeg]]

* xrandr - (manage displays)
Primitive command line interface to RandR extension

Xrandr is used to set the size, orientation and/or reflection of the outputs for a screen. It can also set the screen size.

+ Use the *xrandr* command to list the available displays and their current status. The output will show the name of your connected displays. The display name willl be like *VGA-1*, *HDMI-1* or *DP-1*.
#+begin_example
$ xrandr
#+end_example

+ Use the *xrandr --output* command to set up the extended display. Replace *HDMI-1* with the actual name of your display.
#+begin_example
$ xrandr --output HDMI-1 --mode 1920x1080 --pos 0x0 --rotate normal --output <primary-display> --mode 1920x1080 --pos 1920x0 --rotate normal
#+end_example

    - --output HDMI-1 : Specifies the output display
    - --mode 1920x1080 : Specifies the resolution of the display.
    - --pos 0x0 : Specifies the position of the display. Adjust the values according to your desired layout.
    - --rotate normal : Specifies the rotation of the display. Use *normal, left, right or inverted* as needed.
    - --output <primary-display> : Specifies the primary display
    - --mode 1920x1080 : Specifies the resolution of the primary display.
    - --pos 1920x0 : Specifies the position of the primary display. Adjust the values based on you desired layout.

+ Set the desired resolution for the second display using the '--mode' option.
#+begin_example
$ xrandr --output HDMI-1 --mode 1920x1080 --right-of <primary-display>
#+end_example

    - --output HDMI-1 : Specifies the output display
    - --mode 1920x1080 : Specifies the resolution of the display

+ Specify the resolution for both display.
#+begin_example
$ xrandr --output <primary-display> --mode <primary-resolution> --output HDMI-1 --mode 1920x1080 --right-of <primary-display>
#+end_example

    - <primary-display> : Replace with the name of the primary display.
    - <primary-resolution> : Replace with the resolution of your primary display.

+ Duplicate the screen with a *--same-as* 
#+begin_example
$ xrandr --output HDMI-1 --mode 1920x1080 --same-as <primary-display>
#+end_example

    - --output HDMI-1 : Specifies the output display
    - --mode 1920x1080 : Specifies the resolution of the display
    - --same-as <primary-display> : Specifies that the display should be duplicated to the primary display.

+ Speify the resolution for both display, using is *--same-as*
#+begin_example
$ xrandr --output <primary-display> --mode <primary-resolution> --output HDMI-1 --mode 1920x1080 --same-as <primary-display>
#+end_example  

+ Extend the screen with automatic resolution detection
#+begin_example
$ xrandr --output HDMI-1 --auto --right-of <primary-display>
#+end_example

    - --auto : Tells xrandr to automatically detect and use the preferred/native resolution of the display.

+ Duplicate the screen with automatic resolution detection.
#+begin_example
$ xrandr --output HDMI-1 --auto --same-as <primary-display>
#+end_example

* pacman - (Arch package manager)

** Update the package database:
#+begin_example
$ sudo pacman -Sy
#+end_example

+ -S    : Synchronize the package database.
+ -y    : Download a fresh copy of the master package database from the servers.

** Upgrade installed package:
#+begin_example
$ sudo pacman -Syu
#+end_example

+ -u    : Upgrade all installed package to their latest version.

** Install a package:
#+begin_example
$ sudo pacman -S <package-name>
#+end_example

+ -S    : Install a package.

** Remove a package:
#+begin_example
$ sudo pacman -R <package-name>
#+end_example

+ -R    : Remove a package

** Remove a package and it dependencies:
#+begin_example
$ sudo pacman -Rs <package-name>
#+end_example

+ -Rs   : Remove a package and its dependencies, if they are not required by other installed package.

** Remove a package, its dependencies and all package that depend on it.
#+begin_example
$ sudo pacman -Rns <package-name>
#+end_example

+ -Rns   : Remove a package, its dependencies, and all packages that depend on it.

** Search for a package:
#+begin_example
$ pacman -Ss <search-term>
#+end_example

+ -Ss  : Search for a package in the package database.

** Show information about a package:
#+begin_example
$ pacman -Qi <package-name>
#+end_example

+ -Qi   : Display detailed information about a package

** List installed package
#+begin_example
$ pacman -Q
#+end_example

** List orphaned package
#+begin_example
$ pacman -Qdt
#+end_example

** Clean package caches:
#+begin_example
$ sudo pacman -Sc
#+end_example

** Clean All Uninstalled package from Cache:
#+begin_example
$ sudo pacman -Scc
#+end_example

** List explicity-installed package
#+begin_example
$ pacman -Qe
#+end_example

** Identify Orphaned packages:
#+begin_example
$ pacman -Qdtq
#+end_example

** Remove Orphaned Packages:
#+begin_example
$ sudo pacman -Rns $(pacman -Qdtq)
#+end_example

* pactree - (display tree dependencies)

** Syntax
#+begin_example
$ pactree [option] <package-name>
#+end_example

** Display reverse dependencies
#+begin_example
$ pactree -r <package-name>
#+end_example

** Display dependencies
#+begin_example
$ pacman <package-name>
#+end_example

** example
#+begin_example
$ pactree firefox
#+end_example

#+begin_example
$ pactree -r firefox
#+end_example

* AUR Helper
** paru
AUR helper and pacman wrapper

*** Syntax
#+begin_example
$ paru <operation> [options] [targets]

$ paru <search terms>

$ paru
#+end_example

+ Search for Packages:
#+begin_example
$ paru -Ss package-name
#+end_example

+ Install a package from AUR:
#+begin_example
$ paru -S package-name
#+end_example

+ Remove a Package intalled from AUR:
#+begin_example
$ paru -R package-name
#+end_example

+ Upgrade AUR packages:
#+begin_example
$ paru -Syu
#+end_example

+ Update Package information:
#+begin_example
$ paru -Sy
#+end_example

+ List installed AUR package:
#+begin_example
$ paru -Q
#+end_example

+ Show information about a package:
#+begin_example
$ paru -Si package-name
#+end_example

+ check for AUR Pacakge Update:
#+begin_example
$ paru -Qua
#+end_example

+ Clean up orphaned packages:
#+begin_example
$ paru -Rns $(paru -Qdtq)
#+end_example

+ install AUR Package Without Confirmation:
#+begin_example
$ paru -S --noconfirm package-name
#+end_example

+ Remove Unneeded Dependencies:
#+begin_example
$ paru -Rns $(paru -Qdtq)
#+end_example

+ Update *paru* itself:
#+begin_example
$ paru -S paru
#+end_example

** yay
AUR helper written in go

*** Syntax
#+begin_example
$ yay <operation> [option] [targets]

$ yay <search terms>

$ yay
#+end_example

+ Search for package:
#+begin_example
$ yay -Ss package-name
#+end_example

+ Install a package from AUR:
#+begin_example
$ yay -S package-name
#+end_example

+ Remove a Package Installed from AUR:
#+begin_example
$ yay -R package-name
#+end_example

+ Upgrade AUR package:
#+begin_example
$ yay -Syu
#+end_example

+ Update Package Information:
#+begin_example
$ yay -Sy
#+end_example

+ List intalled AUR Package:
#+begin_example
$ yay -Q
#+end_example

+ Show information about a Package:
#+begin_example
$ yay -Si package-name
#+end_example

+ Check for AUR Package Updates:
#+begin_example
$ yay -Qua
#+end_example

+ Clean up orphaned packages:
#+begin_example
$ yay -Rns $(yay -Qdtq)
#+end_example

+ Install AUR package without Confirmation:
#+begin_example
$ yay -S --noconfirm package-name
#+end_example

+ Remove Unneeded Dependencies:
#+begin_example
$ yay -Rns $(yay -Qdtq)
#+end_example

+ Update *yay* itself:
#+begin_example
$ yay -S yay
#+end_example

* Apache Service
httpd - Apache Hypertext Transfer Protocol Server

+ Install Apache:
#+begin_example
$ sudo pacman -S apache
#+end_example

+ Start Apache
#+begin_example
$ sudo systemctl start httpd
#+end_example

+ Stop Apache:
#+begin_example
$ sudo systemctl stop httpd
#+end_example

+ Restart Apache:
#+begin_example
$ sudo systemctl restart httpd
#+end_example

+ Enable Apache to start on boot:
#+begin_example
$ sudo systemctl enable httpd
#+end_example

+ Disable Apache from starting on boot:
#+begin_example
$ sudo systemctl disable httpd
#+end_example

+ Check Apache status:
#+begin_example
$ sudo systemctl status httpd
#+end_example

+ Reload Apache configuration without restarting:
#+begin_example
$ sudo systemctl reload httpd
#+end_example

+ Test Apache configuration for syntax errors:
#+begin_example
$ sudo apachectl configtest
#+end_example

+ Open the Apache configuration file in a text editor
#+begin_example
$ sudo nvim /etc/httpd/conf/httpd.conf
#+end_example

* Enable SSH
OpenSSH daemon

+ Install OpenSSH:
#+begin_example
$ sudo pacman -S openssh
#+end_example

+ Start the SSH service:
#+begin_example
$ sudo systemctl start sshd
#+end_example

+ Enable SSH to start on boot:
#+begin_example
$ sudo systemctl enable sshd
#+end_example

+ Check the status of the SSH service:
#+begin_example
$ sudo systemctl status sshd
#+end_example

* Auto Mount Drives in Linux on Boot
** Step1:
Make a directory with the name Backup in a /media directory.
#+begin_example
$ sudo mkdir /media/Backup
#+end_example

** Step2: 
Then collect the information of disk which you want to mount.

+ To find the mounted path of the disk e.g. /dev/sdb1
#+begin_example
$ sudo fdisk -l
#+end_example

+ To collect the UUID information of disk
#+begin_example
$ sudo blkid
#+end_example

** Step3: 
Edit the fstab folder, and it is very sensitive.
#+begin_example
$ sudo vim /etc/fstab
#+end_example

+ Edit the file and add the information you collected in this file.

** Step4:
At the end the file should look like this.
[[./img/fstab.png]]

** Step5:
to make shore the mount is proper run this command, this command will mount the disk form the fstab folder.
#+begin_example
$ sudo mount -a
#+end_example


